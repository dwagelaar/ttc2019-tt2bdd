aspect XMIWriter {

  public static String ASTNode.indentString(int n) {
    char[] chars = new char[2*n];
    Arrays.fill(chars, ' ');
    return new String(chars);
  }

  public void TruthTable.writeTruthTable(StringBuilder b) {
    b.append("<?xml version=\"1.0\" encoding=\"ASCII\"?>\n")
      .append("<tt:TruthTable xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:tt=\"https://www.transformation-tool-contest.eu/2019/tt\" name=\"")
      .append(getName())
      .append("\">\n");

    for (Port port: getPortList()) {
      port.writeTruthTable(b);
    }
    for (Row row: getRowList()) {
      row.writeTruthTable(b);
    }
    b.append("</tt:TruthTable>");
  }

  public void Port.writeTruthTable(StringBuilder b) {
    b.append("  <ports xsi:type=\"tt:")
      .append(isInput()?"Input":"Output")
      .append("Port\" name=\"")
      .append(getName())
      .append("\" cells=\"");
    boolean first = true;
    for (Cell cell: getCellList()) {
      if (first) {
        first = false;
      } else {
        b.append(" ");
      }
      b.append(cell.xmiPath());
    }
    b.append("\"/>\n");
  }

  public void Row.writeTruthTable(StringBuilder b) {
    b.append("  <rows>\n");
    for (Cell cell: getCellList()) {
      cell.writeTruthTable(b);
    }
    b.append("  </rows>\n");
  }

  public void Cell.writeTruthTable(StringBuilder b) {
    b.append("    <cells")
      .append(getValue()?" value=\"true\"":"")
      .append(" port=\"")
      .append(getPort().xmiPath())
      .append("\"/>\n");
  }

  public void BDT.writeBDT(StringBuilder b) {
    b.append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n")
      .append("<BDD xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"https://www.transformation-tool-contest.eu/2019/bdd\" name=\"")
      .append(getName())
      .append("\">\n");

    for (BDT_Port port : getPortList()) {
      port.writeBDT(b);
    }
    getTree().writeBDT(0, "tree", b);
    b.append("</BDD>");
  }

  public void BDT_Port.writeBDT(StringBuilder b) {
    b.append("  <ports xsi:type=\"")
      .append(isInput() ? "Input" : "Output")
      .append("Port\" name=\"")
      .append(getName())
      .append("\" ");
    if (isInput()) {
      b.append("subtrees=\"");
      boolean first = true;
      for (BDT_Subtree subTree : asInput().getSubtreeList()) {
        if (first) {
          first = false;
        } else {
          b.append(" ");
        }
        b.append(subTree.xmiPath());
      }
    } else {
      boolean first = true;
      b.append("assignments=\"");
      for (BDT_Assignment assignment : asOutput().getAssignmentList()) {
        if (first) {
          first = false;
        } else {
          b.append(" ");
        }
        b.append(assignment.xmiPath());
      }
    }
    b.append("\"/>\n");
  }

  public abstract void BDT_Tree.writeBDT(int indent, String name, StringBuilder b);

  public void BDT_Subtree.writeBDT(int indent, String name, StringBuilder b) {
    b.append(indentString(indent))
      .append("<")
      .append(name)
      .append(" xsi:type=\"Subtree\" port=\"")
      .append(getPort().xmiPath())
      .append("\">\n");
    if (getTreeForZero() != null) {
      getTreeForZero().writeBDT(indent + 1, "treeForZero", b);
    } else {
      logger.warn("treeForZero is null in {}", xmiPath());
    }
    if (getTreeForOne() != null) {
      getTreeForOne().writeBDT(indent + 1, "treeForOne", b);
    } else {
      logger.warn("treeForOne is null in {}", xmiPath());
    }
    b.append(indentString(indent))
      .append("</")
      .append(name)
      .append(">\n");
  }

  public void BDT_Leaf.writeBDT(int indent, String name, StringBuilder b) {
    b.append(indentString(indent))
      .append("<")
      .append(name)
      .append(" xsi:type=\"Leaf\">\n");
    for (BDT_Assignment assignment : getAssignmentList()) {
      b.append(indentString(indent + 1))
        .append("<assignments value=\"")
        .append(Boolean.toString(assignment.getValue()))
        .append("\" port=\"")
        .append(assignment.getPort().xmiPath())
        .append("\"/>\n");
    }
    b.append(indentString(indent))
      .append("</")
      .append(name)
      .append(">\n");
  }

  public void BDD.writeBDD(StringBuilder b) {
    b.append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n")
    .append("<bddg:BDD xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bddg=\"https://www.transformation-tool-contest.eu/2019/bdd/graph\" name=\"")
    .append(getName())
    .append("\" root=\"")
    .append(getRoot().xmiPath())
    .append("\">\n");

    for (BDD_Port port : getPortList()) {
      port.writeBDD(b);
    }
    for (BDD_Tree node: getTreeList()) {
      node.writeBDD("trees", b);
    }
    b.append("</bddg:BDD>");
  }

  public abstract void BDD_Tree.writeBDD(String context, StringBuilder b);

  public void BDD_Leaf.writeBDD(String context, StringBuilder b) {
    b.append("  <")
      .append(context)
      .append(" xsi:type=\"bddg:Leaf\"");
    if (getOwnerSubtreeForZeroList().size() > 0) {
      b.append(" ownerSubtreeForZero=\"");
      boolean first = true;
      for (BDD_Tree parent: getOwnerSubtreeForZeroList()) {
        if (first) {
          first = false;
        } else {
          b.append(" ");
        }
        b.append(parent.xmiPath());
      }
      b.append("\"");
    }
    if (getOwnerSubtreeForOneList().size() > 0) {
      b.append(" ownerSubtreeForOne=\"");
      boolean first = true;
      for (BDD_Tree parent: getOwnerSubtreeForOneList()) {
        if (first) {
          first = false;
        } else {
          b.append(" ");
        }
        b.append(parent.xmiPath());
      }
      b.append("\"");
    }
    b.append(">\n");
    for (BDD_Assignment assignment : getAssignmentList()) {
    b.append("    ")
      .append("<assignments value=\"")
      .append(Boolean.toString(assignment.getValue()))
      .append("\" port=\"")
      .append(assignment.getPort().xmiPath())
      .append("\"/>\n");
    }
    b.append("  ")
      .append("</")
      .append(context)
      .append(">\n");
  }

  public void BDD_Subtree.writeBDD(String context, StringBuilder b) {
    b.append("  <")
      .append(context)
      .append(" xsi:type=\"bddg:Subtree\"");
    if (getOwnerSubtreeForZeroList().size() > 0) {
      b.append(" ownerSubtreeForZero=\"");
      boolean first = true;
      for (BDD_Tree parent: getOwnerSubtreeForZeroList()) {
        if (first) {
          first = false;
        } else {
          b.append(" ");
        }
        b.append(parent.xmiPath());
      }
      b.append("\"");
    }
    if (getOwnerSubtreeForOneList().size() > 0) {
      b.append(" ownerSubtreeForOne=\"");
      boolean first = true;
      for (BDD_Tree parent: getOwnerSubtreeForOneList()) {
        if (first) {
          first = false;
        } else {
          b.append(" ");
        }
        b.append(parent.xmiPath());
      }
      b.append("\"");
    }
    b.append(" port=\"")
      .append(getPort().xmiPath())
      .append("\"");
    if (getTreeForZero() != null) {
      b.append(" treeForZero=\"")
        .append(getTreeForZero().xmiPath())
        .append("\"");
    } else {
      logger.warn("TreeForZero is null in {}", xmiPath());
    }
    if (getTreeForOne() != null) {
      b.append(" treeForOne=\"")
        .append(getTreeForOne().xmiPath())
        .append("\"");
    } else {
      logger.warn("TreeForOne is null in {}", xmiPath());
    }
    b.append("/>\n");
  }

  public void BDD_Port.writeBDD(StringBuilder b) {
    b.append("  <ports xsi:type=\"bddg:")
      .append(isInput() ? "Input" : "Output")
      .append("Port\" name=\"")
      .append(getName())
      .append("\" ");
    if (isInput()) {
      b.append("subtrees=\"");
      boolean first = true;
      for (BDD_Subtree inner : asInput().getSubtreeList()) {
        if (first) {
          first = false;
        } else {
          b.append(" ");
        }
        b.append(inner.xmiPath());
      }
    } else {
      boolean first = true;
      b.append("assignments=\"");
      for (BDD_Assignment assignment : asOutput().getAssignmentList()) {
        if (first) {
          first = false;
        } else {
          b.append(" ");
        }
        b.append(assignment.xmiPath());
      }
    }
    b.append("\"/>\n");
  }

}
