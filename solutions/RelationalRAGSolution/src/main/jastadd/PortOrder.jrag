aspect PortOrder {

  syn nta PortOrder TruthTable.getNaturalPortOrder() {
    // a port order defines the order, in which the input ports are evaluated
    // for the simple case, this order is defined by the list in which the ports are defined
    PortOrder result = new PortOrder();
    for (Port port : getPortList()) {
      if (port.isInput()) {
        result.addPort(port.asInput());
      }
    }
    return result;
  }

  syn nta PortOrder TruthTable.getHeuristicPortOrder() {
    List<InputPort> inputPorts = inputPorts();
    List<OutputPort> outputPorts = outputPorts();
    int[][] matchingBits = new int[inputPorts.size()][];
    for (int inIndex = 0; inIndex < inputPorts.size(); ++inIndex) {
      matchingBits[inIndex] = new int[outputPorts.size()];
    }
    /* iterate over rows
     * check for each input port, which output port it matches
     * count those matches and normalize to number of rows
     * add those ratios up for each output port
     */
    for (Row row : getRowList()) {
      for (int inIndex = 0; inIndex < inputPorts.size(); ++inIndex) {
        InputPort in = inputPorts.get(inIndex);
        Boolean inValue = row.valueFor(in);
        for (int outIndex = 0; outIndex < outputPorts.size(); ++outIndex) {
          OutputPort out = outputPorts.get(outIndex);
          if (row.valueFor(out).equals(inValue)) {
            matchingBits[inIndex][outIndex] += 1;
          }
        }
      }
    }
    int[] inMatchingBits = new int[inputPorts.size()];
    int halfNumRows = getNumRow() / 2;
    for (int inIndex = 0; inIndex < inputPorts.size(); ++inIndex) {
        for (int outIndex = 0; outIndex < outputPorts.size(); ++outIndex) {
          inMatchingBits[inIndex] -= Math.abs(matchingBits[inIndex][outIndex] - halfNumRows);
      }
    }
    int[] sortedIndices = java.util.stream.IntStream.range(0, inMatchingBits.length)
                            .boxed().sorted((i, j) -> Integer.compare(inMatchingBits[i], inMatchingBits[j]))
                            .mapToInt(ele -> ele).toArray();
    PortOrder result = new PortOrder();
    for (int portIndex : sortedIndices) {
      result.addPort(inputPorts.get(portIndex));
    }
    return result;
  }

  syn List<InputPort> PortOrder.subTreePortList() = getPortList().subList(1, getPortList().size());

  syn InputPort PortOrder.leafPort() = getPortList().get(getPortList().size() - 1);

}
