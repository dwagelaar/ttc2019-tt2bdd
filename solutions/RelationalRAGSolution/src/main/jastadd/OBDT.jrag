aspect OBDT {

  syn nta BDT TruthTable.OBDT() {

    BDT bdt = emptyBDT();

    PortOrder portOrder = getPortOrder();

    BDT_Subtree root = new BDT_Subtree();
    root.setPort(bdt.bdtInputPort(portOrder.getPortList().get(0)));
    bdt.setTree(root);

    for (Row row : getRowList()) {
      insertRow(bdt, root, row, 0);
    }

    return bdt;
  }

  private void TruthTable.insertRow(BDT bdt, BDT_Subtree parent, Row row, int position) {

    InputPort port = getPortOrder().getPortList().get(position);
    Boolean value = row.valueFor(port);

    if (position < getPortOrder().getPortList().size() - 1) {
      BDT_InputPort nextPort = bdt.bdtInputPort(getPortOrder().getPortList().get(position + 1));
      if (value == null || value) {
        BDT_Subtree result;
        if (parent.getTreeForOne() != null) {
          result = parent.getTreeForOne().asSubtree();
        } else {
          result = new BDT_Subtree();
          result.setPort(nextPort);
          parent.setTreeForOne(result);
        }
        insertRow(bdt, result, row, position + 1);
      }
      if (value == null || !value) {
        BDT_Subtree result;
        if (parent.getTreeForZero() != null) {
          result = parent.getTreeForZero().asSubtree();
        } else {
          result = new BDT_Subtree();
          result.setPort(nextPort);
          parent.setTreeForZero(result);
        }
        insertRow(bdt, result, row, position + 1);
      }
    } else {
      if (value == null) {
        if (parent.getTreeForOne() != null || parent.getTreeForZero() != null) {
          logger.warn("found duplicate row");
        }
        parent.setTreeForOne(bdt.createTerminal(row));
        parent.setTreeForZero(bdt.createTerminal(row));
      } else if (value) {
        if (parent.getTreeForOne() != null) {
          logger.warn("found duplicate row");
        }
        parent.setTreeForOne(bdt.createTerminal(row));
      } else {
        if (parent.getTreeForZero() != null) {
          logger.warn("found duplicate row");
        }
        parent.setTreeForZero(bdt.createTerminal(row));
      }
    }
  }

  BDT_Leaf BDT.createTerminal(Row row) {
    BDT_Leaf leaf = new BDT_Leaf();
    leaf.addRow(row);
    for (Cell cell: row.getCellList()) {
      Port cellPort = cell.getPort();
      if (!cellPort.isInput()) {
        BDT_Assignment a = new BDT_Assignment();
        a.setPort(bdtOutputPort(cellPort.asOutput()));
        a.setValue(cell.getValue());
        leaf.addAssignment(a);
      }
    }
    return leaf;
  }

}
