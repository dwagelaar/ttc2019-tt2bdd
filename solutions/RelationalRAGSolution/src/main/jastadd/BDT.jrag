aspect BDT {

  syn BDT TruthTable.BDT() {

    BDT bdt = emptyBDT();

    List<Row> allRows = new ArrayList(getNumRow());
    for(Row row: getRowList()) {
      allRows.add(row);
    }
    ArrayList<InputPort> allInputPorts = new ArrayList(getNumPort());
    for (Port port: getPortList()) {
      if (port.isInput()) {
        allInputPorts.add(port.asInput());
      }
    }

    bdt.setTree(bdt.createTree(allRows, allInputPorts));

    return bdt;
  }

  public BDT TruthTable.emptyBDT() {
    BDT bdt = new BDT();

    bdt.setTruthTable(this);

    bdt.setName(getName());

    for (Port port: getPortList()) {
      if (port.isInput()) {
        BDT_InputPort bdtPort = new BDT_InputPort();
        bdtPort.setName(port.getName());
        bdtPort.setTruthTableInputPort(port.asInput());
        bdt.addPort(bdtPort);
      } else {
        BDT_OutputPort bdtPort = new BDT_OutputPort();
        bdtPort.setName(port.getName());
        bdtPort.setTruthTableOutputPort(port.asOutput());
        bdt.addPort(bdtPort);
      }
    }

    return bdt;
  }

  public BDT_Tree BDT.createTree(List<Row> rows, ArrayList<InputPort> remainingPorts) {

    Map<OutputPort,Boolean> firstAssignment = null;
    boolean isLeaf = true;
    rowLoop: for (Row row: rows) {
      if (firstAssignment == null) {
        firstAssignment = new HashMap<>();
        for (Cell cell: row.getCellList()) {
          if (!cell.getPort().isInput()) {
            firstAssignment.put(cell.getPort().asOutput(), cell.getValue());
          }
        }
      }
      for (Cell cell: row.getCellList()) {
        if (!cell.getPort().isInput() && firstAssignment.get(cell.getPort()) != cell.getValue()) {
          isLeaf = false;
          break rowLoop;
        }
      }
    }

    if (isLeaf) {
      BDT_Leaf result = new BDT_Leaf();
      for (Row row: rows) {
        result.addRow(row);
      }
      for (Map.Entry<OutputPort, Boolean> entry: firstAssignment.entrySet()) {
        BDT_Assignment assignment = new BDT_Assignment();
        assignment.setValue(entry.getValue());
        assignment.setPort(bdtPort(entry.getKey()).asOutput());
        result.addAssignment(assignment);
      }
      return result;
    } else {
      // pick next InputPort
      int nextPortIndex = 0;
      InputPort nextPort = remainingPorts.remove(nextPortIndex);
      ArrayList remainingPortsForZero = remainingPorts;
      ArrayList remainingPortsForOne  = (ArrayList) remainingPorts.clone();

      List<Row> rowsForZero = new ArrayList();
      List<Row> rowsForOne = new ArrayList();
      for (Row row: rows) {
        Boolean rowValue = row.valueFor(nextPort);
        if (rowValue == null) {
          rowsForOne.add(row);
          rowsForZero.add(row);
        } else if (rowValue) {
          rowsForOne.add(row);
        } else {
          rowsForZero.add(row);
        }
      }
      BDT_Subtree result = new BDT_Subtree();
      result.setPort(bdtInputPort(nextPort));
      result.setTreeForZero(createTree(rowsForZero, remainingPortsForZero));
      result.setTreeForOne(createTree(rowsForOne, remainingPortsForOne));
      return result;
    }
  }

  syn BDT_InputPort BDT.bdtInputPort(Port port) {
    for (BDT_Port bdtPort: getPortList()) {
      if (bdtPort.isInput()) {
        BDT_InputPort result = bdtPort.asInput();

        if (result.getTruthTableInputPort() == port) {
          return result;
        }
      }
    }
    throw new RuntimeException("This BDT does not know about input port " + port.getName());
  }

  syn BDT_OutputPort BDT.bdtOutputPort(Port port) {
    for (BDT_Port bdtPort: getPortList()) {
      if (!bdtPort.isInput()) {
        BDT_OutputPort result = bdtPort.asOutput();
        if (result.getTruthTableOutputPort() == port) {
          return result;
        }
      }
    }
    throw new RuntimeException("This BDT does not know about output port " + port.getName());
  }

  syn BDT_Port BDT.bdtPort(Port port) {
    if (port.isInput()) {
      return bdtInputPort(port);
    } else {
      return bdtOutputPort(port);
    }
  }
}
