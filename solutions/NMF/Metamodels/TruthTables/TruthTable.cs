//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2019.BinaryDecision.Metamodels.TruthTables.TT
{
    
    
    /// <summary>
    /// The default implementation of the TruthTable class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("https://www.transformation-tool-contest.eu/2019/tt")]
    [XmlNamespacePrefixAttribute("tt")]
    [ModelRepresentationClassAttribute("https://www.transformation-tool-contest.eu/2019/tt#//TruthTable")]
    [DebuggerDisplayAttribute("TruthTable {Name}")]
    public partial class TruthTable : LocatedElement, ITruthTable, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static Lazy<ITypedElement> _portsReference = new Lazy<ITypedElement>(RetrievePortsReference);
        
        /// <summary>
        /// The backing field for the Ports property
        /// </summary>
        private TruthTablePortsCollection _ports;
        
        private static Lazy<ITypedElement> _rowsReference = new Lazy<ITypedElement>(RetrieveRowsReference);
        
        /// <summary>
        /// The backing field for the Rows property
        /// </summary>
        private TruthTableRowsCollection _rows;
        
        private static IClass _classInstance;
        
        public TruthTable()
        {
            this._ports = new TruthTablePortsCollection(this);
            this._ports.CollectionChanging += this.PortsCollectionChanging;
            this._ports.CollectionChanged += this.PortsCollectionChanged;
            this._rows = new TruthTableRowsCollection(this);
            this._rows.CollectionChanging += this.RowsCollectionChanging;
            this._rows.CollectionChanged += this.RowsCollectionChanged;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("TruthTable")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ports property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ports")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("owner")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPort> Ports
        {
            get
            {
                return this._ports;
            }
        }
        
        /// <summary>
        /// The rows property
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("rows")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("owner")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IRow> Rows
        {
            get
            {
                return this._rows;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new TruthTableChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TruthTableReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://www.transformation-tool-contest.eu/2019/tt#//TruthTable")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TruthTable.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePortsReference()
        {
            return ((ITypedElement)(((ModelElement)(TruthTable.ClassInstance)).Resolve("ports")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Ports property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PortsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Ports", e, _portsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Ports property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PortsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Ports", e, _portsReference);
        }
        
        private static ITypedElement RetrieveRowsReference()
        {
            return ((ITypedElement)(((ModelElement)(TruthTable.ClassInstance)).Resolve("rows")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Rows property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RowsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Rows", e, _rowsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Rows property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RowsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Rows", e, _rowsReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int portsIndex = ModelHelper.IndexOfReference(this.Ports, element);
            if ((portsIndex != -1))
            {
                return ModelHelper.CreatePath("ports", portsIndex);
            }
            int rowsIndex = ModelHelper.IndexOfReference(this.Rows, element);
            if ((rowsIndex != -1))
            {
                return ModelHelper.CreatePath("rows", rowsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PORTS"))
            {
                if ((index < this.Ports.Count))
                {
                    return this.Ports[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ROWS"))
            {
                if ((index < this.Rows.Count))
                {
                    return this.Rows[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PORTS"))
            {
                return this._ports;
            }
            if ((feature == "ROWS"))
            {
                return this._rows;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._ports))
            {
                return "ports";
            }
            if ((container == this._rows))
            {
                return "rows";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://www.transformation-tool-contest.eu/2019/tt#//TruthTable")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TruthTable class
        /// </summary>
        public class TruthTableChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TruthTable _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TruthTableChildrenCollection(TruthTable parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Ports.Count);
                    count = (count + this._parent.Rows.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Ports.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Rows.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Ports.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Rows.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPort portsCasted = item.As<IPort>();
                if ((portsCasted != null))
                {
                    this._parent.Ports.Add(portsCasted);
                }
                IRow rowsCasted = item.As<IRow>();
                if ((rowsCasted != null))
                {
                    this._parent.Rows.Add(rowsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Ports.Clear();
                this._parent.Rows.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Ports.Contains(item))
                {
                    return true;
                }
                if (this._parent.Rows.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> portsEnumerator = this._parent.Ports.GetEnumerator();
                try
                {
                    for (
                    ; portsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = portsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    portsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> rowsEnumerator = this._parent.Rows.GetEnumerator();
                try
                {
                    for (
                    ; rowsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = rowsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    rowsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPort portItem = item.As<IPort>();
                if (((portItem != null) 
                            && this._parent.Ports.Remove(portItem)))
                {
                    return true;
                }
                IRow rowItem = item.As<IRow>();
                if (((rowItem != null) 
                            && this._parent.Rows.Remove(rowItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Ports).Concat(this._parent.Rows).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TruthTable class
        /// </summary>
        public class TruthTableReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TruthTable _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TruthTableReferencedElementsCollection(TruthTable parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Ports.Count);
                    count = (count + this._parent.Rows.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Ports.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Rows.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Ports.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Rows.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPort portsCasted = item.As<IPort>();
                if ((portsCasted != null))
                {
                    this._parent.Ports.Add(portsCasted);
                }
                IRow rowsCasted = item.As<IRow>();
                if ((rowsCasted != null))
                {
                    this._parent.Rows.Add(rowsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Ports.Clear();
                this._parent.Rows.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Ports.Contains(item))
                {
                    return true;
                }
                if (this._parent.Rows.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> portsEnumerator = this._parent.Ports.GetEnumerator();
                try
                {
                    for (
                    ; portsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = portsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    portsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> rowsEnumerator = this._parent.Rows.GetEnumerator();
                try
                {
                    for (
                    ; rowsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = rowsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    rowsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPort portItem = item.As<IPort>();
                if (((portItem != null) 
                            && this._parent.Ports.Remove(portItem)))
                {
                    return true;
                }
                IRow rowItem = item.As<IRow>();
                if (((rowItem != null) 
                            && this._parent.Rows.Remove(rowItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Ports).Concat(this._parent.Rows).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<ITruthTable, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(ITruthTable modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
}

