//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2019.BinaryDecision.Metamodels.BinaryDecisionDiagrams.BDD
{
    
    
    /// <summary>
    /// The default implementation of the Subtree class
    /// </summary>
    [XmlNamespaceAttribute("https://www.transformation-tool-contest.eu/2019/bdd")]
    [XmlNamespacePrefixAttribute("bdd")]
    [ModelRepresentationClassAttribute("https://www.transformation-tool-contest.eu/2019/bdd#//Subtree")]
    public partial class Subtree : Tree, ISubtree, IModelElement
    {
        
        private static Lazy<ITypedElement> _portReference = new Lazy<ITypedElement>(RetrievePortReference);
        
        /// <summary>
        /// The backing field for the Port property
        /// </summary>
        private IInputPort _port;
        
        private static Lazy<ITypedElement> _treeForZeroReference = new Lazy<ITypedElement>(RetrieveTreeForZeroReference);
        
        /// <summary>
        /// The backing field for the TreeForZero property
        /// </summary>
        private ITree _treeForZero;
        
        private static Lazy<ITypedElement> _treeForOneReference = new Lazy<ITypedElement>(RetrieveTreeForOneReference);
        
        /// <summary>
        /// The backing field for the TreeForOne property
        /// </summary>
        private ITree _treeForOne;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The port property
        /// </summary>
        [DisplayNameAttribute("port")]
        [CategoryAttribute("Subtree")]
        [XmlElementNameAttribute("port")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("subtrees")]
        public IInputPort Port
        {
            get
            {
                return this._port;
            }
            set
            {
                if ((this._port != value))
                {
                    IInputPort old = this._port;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPortChanging(e);
                    this.OnPropertyChanging("Port", e, _portReference);
                    this._port = value;
                    if ((old != null))
                    {
                        old.Subtrees.Remove(this);
                        old.Deleted -= this.OnResetPort;
                    }
                    if ((value != null))
                    {
                        value.Subtrees.Add(this);
                        value.Deleted += this.OnResetPort;
                    }
                    this.OnPortChanged(e);
                    this.OnPropertyChanged("Port", e, _portReference);
                }
            }
        }
        
        /// <summary>
        /// The treeForZero property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("treeForZero")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("ownerSubtreeForZero")]
        public ITree TreeForZero
        {
            get
            {
                return this._treeForZero;
            }
            set
            {
                if ((this._treeForZero != value))
                {
                    ITree old = this._treeForZero;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTreeForZeroChanging(e);
                    this.OnPropertyChanging("TreeForZero", e, _treeForZeroReference);
                    this._treeForZero = value;
                    if ((old != null))
                    {
                        old.ParentChanged -= this.OnResetTreeForZero;
                        if (old.OwnerSubtreeForZero == this)
                        {
                            old.OwnerSubtreeForZero = null;
                        }
                    }
                    if ((value != null))
                    {
                        value.OwnerSubtreeForZero = this;
                        value.ParentChanged += this.OnResetTreeForZero;
                    }
                    this.OnTreeForZeroChanged(e);
                    this.OnPropertyChanged("TreeForZero", e, _treeForZeroReference);
                }
            }
        }
        
        /// <summary>
        /// The treeForOne property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("treeForOne")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("ownerSubtreeForOne")]
        public ITree TreeForOne
        {
            get
            {
                return this._treeForOne;
            }
            set
            {
                if ((this._treeForOne != value))
                {
                    ITree old = this._treeForOne;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTreeForOneChanging(e);
                    this.OnPropertyChanging("TreeForOne", e, _treeForOneReference);
                    this._treeForOne = value;
                    if ((old != null))
                    {
                        old.ParentChanged -= this.OnResetTreeForOne;
                        if (old.OwnerSubtreeForOne == this)
                        {
                            old.OwnerSubtreeForOne = null;
                        }
                    }
                    if ((value != null))
                    {
                        value.OwnerSubtreeForOne = this;
                        value.ParentChanged += this.OnResetTreeForOne;
                    }
                    this.OnTreeForOneChanged(e);
                    this.OnPropertyChanged("TreeForOne", e, _treeForOneReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SubtreeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SubtreeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://www.transformation-tool-contest.eu/2019/bdd#//Subtree")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Port property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PortChanging;
        
        /// <summary>
        /// Gets fired when the Port property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PortChanged;
        
        /// <summary>
        /// Gets fired before the TreeForZero property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TreeForZeroChanging;
        
        /// <summary>
        /// Gets fired when the TreeForZero property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TreeForZeroChanged;
        
        /// <summary>
        /// Gets fired before the TreeForOne property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TreeForOneChanging;
        
        /// <summary>
        /// Gets fired when the TreeForOne property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TreeForOneChanged;
        
        private static ITypedElement RetrievePortReference()
        {
            return ((ITypedElement)(((ModelElement)(Subtree.ClassInstance)).Resolve("port")));
        }
        
        /// <summary>
        /// Raises the PortChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPortChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PortChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PortChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPortChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PortChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Port property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPort(object sender, System.EventArgs eventArgs)
        {
            this.Port = null;
        }
        
        private static ITypedElement RetrieveTreeForZeroReference()
        {
            return ((ITypedElement)(((ModelElement)(Subtree.ClassInstance)).Resolve("treeForZero")));
        }
        
        /// <summary>
        /// Raises the TreeForZeroChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTreeForZeroChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TreeForZeroChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TreeForZeroChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTreeForZeroChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TreeForZeroChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TreeForZero property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTreeForZero(object sender, System.EventArgs eventArgs)
        {
            this.TreeForZero = null;
        }
        
        private static ITypedElement RetrieveTreeForOneReference()
        {
            return ((ITypedElement)(((ModelElement)(Subtree.ClassInstance)).Resolve("treeForOne")));
        }
        
        /// <summary>
        /// Raises the TreeForOneChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTreeForOneChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TreeForOneChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TreeForOneChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTreeForOneChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TreeForOneChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TreeForOne property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTreeForOne(object sender, System.EventArgs eventArgs)
        {
            this.TreeForOne = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.TreeForZero))
            {
                return ModelHelper.CreatePath("TreeForZero");
            }
            if ((element == this.TreeForOne))
            {
                return ModelHelper.CreatePath("TreeForOne");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PORT"))
            {
                return this.Port;
            }
            if ((reference == "TREEFORZERO"))
            {
                return this.TreeForZero;
            }
            if ((reference == "TREEFORONE"))
            {
                return this.TreeForOne;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PORT"))
            {
                this.Port = ((IInputPort)(value));
                return;
            }
            if ((feature == "TREEFORZERO"))
            {
                this.TreeForZero = ((ITree)(value));
                return;
            }
            if ((feature == "TREEFORONE"))
            {
                this.TreeForOne = ((ITree)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PORT"))
            {
                return new PortProxy(this);
            }
            if ((reference == "TREEFORZERO"))
            {
                return new TreeForZeroProxy(this);
            }
            if ((reference == "TREEFORONE"))
            {
                return new TreeForOneProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://www.transformation-tool-contest.eu/2019/bdd#//Subtree")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Subtree class
        /// </summary>
        public class SubtreeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Subtree _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubtreeChildrenCollection(Subtree parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TreeForZero != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TreeForOne != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TreeForZeroChanged += this.PropagateValueChanges;
                this._parent.TreeForOneChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TreeForZeroChanged -= this.PropagateValueChanges;
                this._parent.TreeForOneChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TreeForZero == null))
                {
                    ITree treeForZeroCasted = item.As<ITree>();
                    if ((treeForZeroCasted != null))
                    {
                        this._parent.TreeForZero = treeForZeroCasted;
                        return;
                    }
                }
                if ((this._parent.TreeForOne == null))
                {
                    ITree treeForOneCasted = item.As<ITree>();
                    if ((treeForOneCasted != null))
                    {
                        this._parent.TreeForOne = treeForOneCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TreeForZero = null;
                this._parent.TreeForOne = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TreeForZero))
                {
                    return true;
                }
                if ((item == this._parent.TreeForOne))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TreeForZero != null))
                {
                    array[arrayIndex] = this._parent.TreeForZero;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TreeForOne != null))
                {
                    array[arrayIndex] = this._parent.TreeForOne;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TreeForZero == item))
                {
                    this._parent.TreeForZero = null;
                    return true;
                }
                if ((this._parent.TreeForOne == item))
                {
                    this._parent.TreeForOne = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TreeForZero).Concat(this._parent.TreeForOne).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Subtree class
        /// </summary>
        public class SubtreeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Subtree _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubtreeReferencedElementsCollection(Subtree parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Port != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TreeForZero != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TreeForOne != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PortChanged += this.PropagateValueChanges;
                this._parent.TreeForZeroChanged += this.PropagateValueChanges;
                this._parent.TreeForOneChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PortChanged -= this.PropagateValueChanges;
                this._parent.TreeForZeroChanged -= this.PropagateValueChanges;
                this._parent.TreeForOneChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Port == null))
                {
                    IInputPort portCasted = item.As<IInputPort>();
                    if ((portCasted != null))
                    {
                        this._parent.Port = portCasted;
                        return;
                    }
                }
                if ((this._parent.TreeForZero == null))
                {
                    ITree treeForZeroCasted = item.As<ITree>();
                    if ((treeForZeroCasted != null))
                    {
                        this._parent.TreeForZero = treeForZeroCasted;
                        return;
                    }
                }
                if ((this._parent.TreeForOne == null))
                {
                    ITree treeForOneCasted = item.As<ITree>();
                    if ((treeForOneCasted != null))
                    {
                        this._parent.TreeForOne = treeForOneCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Port = null;
                this._parent.TreeForZero = null;
                this._parent.TreeForOne = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Port))
                {
                    return true;
                }
                if ((item == this._parent.TreeForZero))
                {
                    return true;
                }
                if ((item == this._parent.TreeForOne))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Port != null))
                {
                    array[arrayIndex] = this._parent.Port;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TreeForZero != null))
                {
                    array[arrayIndex] = this._parent.TreeForZero;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TreeForOne != null))
                {
                    array[arrayIndex] = this._parent.TreeForOne;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Port == item))
                {
                    this._parent.Port = null;
                    return true;
                }
                if ((this._parent.TreeForZero == item))
                {
                    this._parent.TreeForZero = null;
                    return true;
                }
                if ((this._parent.TreeForOne == item))
                {
                    this._parent.TreeForOne = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Port).Concat(this._parent.TreeForZero).Concat(this._parent.TreeForOne).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the port property
        /// </summary>
        private sealed class PortProxy : ModelPropertyChange<ISubtree, IInputPort>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PortProxy(ISubtree modelElement) : 
                    base(modelElement, "port")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPort Value
            {
                get
                {
                    return this.ModelElement.Port;
                }
                set
                {
                    this.ModelElement.Port = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the treeForZero property
        /// </summary>
        private sealed class TreeForZeroProxy : ModelPropertyChange<ISubtree, ITree>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TreeForZeroProxy(ISubtree modelElement) : 
                    base(modelElement, "treeForZero")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITree Value
            {
                get
                {
                    return this.ModelElement.TreeForZero;
                }
                set
                {
                    this.ModelElement.TreeForZero = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the treeForOne property
        /// </summary>
        private sealed class TreeForOneProxy : ModelPropertyChange<ISubtree, ITree>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TreeForOneProxy(ISubtree modelElement) : 
                    base(modelElement, "treeForOne")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITree Value
            {
                get
                {
                    return this.ModelElement.TreeForOne;
                }
                set
                {
                    this.ModelElement.TreeForOne = value;
                }
            }
        }
    }
}

